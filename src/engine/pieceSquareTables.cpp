#include "engine.h"
#include <iostream>
#include <stdio.h>
#include <stdlib.h>

// const int8_t pst_rank[][8] = {
//     {0, S(-3, 0), S(-3, -1), S(-1, -1), S(2, 0), S(5, 2), 0, 0},
//     {S(-6, -5), S(-4, -2), S(-1, 0), S(1, 3), S(5, 4), S(10, 1), S(6, -1), S(-11, -1)},
//     {S(-5, -3), S(-1, -2), S(1, 0), S(2, 2), S(3, 2), S(6, 1), S(2, 0), S(-8, 0)},
//     {S(-2, -2), S(-4, -3), S(-5, -2), S(-4, 0), S(-1, 1), S(3, 1), S(5, 2), S(8, 1)},
//     {S(-2, -11), S(0, -9), S(0, -4), S(-2, 2), S(-1, 6), S(3, 4), S(-1, 7), S(4, 4)},
//     {S(0, -5), S(0, -1), S(-2, 0), S(-5, 2), S(-2, 3), S(6, 2), S(3, 1), S(2, -4)},
// };
// const int8_t pst_file[][8] = {
//     {S(-2, 0), S(-1, 1), S(-1, 0), S(0, -1), S(1, 0), S(2, 0), S(3, 0), S(-2, 0)},
//     {S(-6, -3), S(-2, -1), S(1, 2), S(2, 3), S(2, 3), S(3, 1), S(1, -1), S(-2, -4)},
//     {S(-3, -2), 0, S(1, 0), S(0, 2), S(0, 2), S(0, 1), S(2, -1), S(-1, -2)},
//     {S(-1, 0), S(-2, 1), S(-1, 1), 0, S(1, -1), S(2, 0), S(2, 0), S(-1, -1)},
//     {S(-3, -5), S(-2, -2), S(-1, 0), S(0, 1), S(0, 3), S(1, 3), S(3, 0), S(2, 0)},
//     {S(-2, -3), S(1, -1), S(-3, 1), S(-5, 2), S(-5, 2), S(-2, 1), S(1, 0), S(1, -3)},
// };

// {
//     {0, 1137, 527, 409, 389, 85, }
//     {0, 880, 476, 281, 250, 103, }
//     {
//         {  -8,   -4,  -27,  -83,  -31,  -57,    8,    0, },
//         { -17,   -7,   -4,    2,   -7,    2,    3,   11, },
//         { -14,  -12,    5,   10,   14,   -1,  -14,   -4, },
//         { -11,   11,   15,    7,    8,    5,   19,    0, },
//         { -31,   -7,    7,   10,    7,   11,   -3,  -21, },
//         { -45,  -13,  -14,   -2,    7,    9,   36,  -14, },
//     },
//     {
//         { -37,  -12,    2,   15,    6,   16,   -3,  -21, },
//         { -27,  -22,   -4,   -5,   21,    8,   -7,  -29, },
//         {  -1,    5,    3,    5,   -4,   -3,   -4,  -19, },
//         { -20,  -14,  -13,   -4,   -2,   -7,  -19,  -28, },
//         { -31,  -13,   -5,    6,    4,   -5,  -16,  -33, },
//         {  24,   14,    4,   -2,   -8,   -5,   -2,    1, },
//     },

//     {
//         {  26,   -1,  -29,  -22,   25,   85,   89,  118, },
//         {  -1,    4,    0,   -8,  -11,   28,  -13,   -7, },
//         {   1,  -19,   -9,  -12,   14,   33,   39,   77, },
//         { -12,    8,   16,   13,    3,   36,   11,  -32, },
//         { -22,   -9,    2,    5,   15,   45,   22, -127, },
//         {   0,    5,    0,   -1,    5,   13,   30,    0, },
//     },
//     {
//         { -41,   -4,    5,    4,    0,   -5,  -13,  -42, },
//         { -59,  -29,  -16,    7,   20,   -6,   20,    8, },
//         {  -8,   -6,  -12,   -4,   -5,   -6,   -1,  -10, },
//         { -29,  -12,   -9,   -6,    0,  -11,  -22,  -22, },
//         { -32,  -15,   -2,   10,   13,   -9,  -27,  -22, },
//         {   0,   -7,  -14,  -17,    0,   65,  141,    0, },
//     },
// }

S pawn_pst[64] = {S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), 
                S(52, 117), S(83, 107), S(60, 109), S(86, 55), S(71, 51), S(53, 66), S(-16, 113), S(-43, 126), 
                S(-18, 51), S(1, 60), S(30, 25), S(36, 2), S(39, -7), S(60, -21), S(43, 27), S(-1, 23), 
                S(-28, -23), S(-1, -34), S(-1, -54), S(3, -64), S(23, -74), S(11, -69), S(20, -51), S(-4, -50), 
                S(-36, -50), S(-8, -52), S(-7, -71), S(7, -74), S(9, -76), S(4, -76), S(6, -62), S(-15, -71), 
                S(-33, -57), S(-13, -54), S(-11, -72), S(-8, -60), S(8, -68), S(-1, -71), S(23, -65), S(-5, -75), 
                S(-30, -54), S(-9, -51), S(-18, -64), S(-15, -51), S(-3, -51), S(14, -66), S(34, -66), S(-12, -75), 
                S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0), S(0, 0)};

S knight_pst[64] = {S(-126, -78), S(-108, -12), S(-43, 3), S(-9, -5), S(29, -2), S(-31, -27), S(-85, -6), S(-77, -99), S(-1, -20), S(20, 1), S(46, 9), S(66, 8), S(48, 1), S(109, -13), S(20, -2), S(42, -37), S(17, -3), S(55, 11), S(75, 29), S(85, 29), S(122, 14), S(125, 8), S(80, 1), S(49, -14), S(18, 7), S(33, 28), S(58, 41), S(81, 41), S(61, 43), S(85, 39), S(46, 26), S(55, -1), S(5, 8), S(22, 18), S(40, 42), S(43, 42), S(54, 45), S(48, 34), S(42, 20), S(17, 0), S(-12, -9), S(10, 11), S(28, 19), S(35, 35), S(50, 32), S(35, 14), S(34, 5), S(5, -6), S(-22, -18), S(-10, -1), S(4, 9), S(23, 11), S(22, 12), S(26, 4), S(8, -10), S(4, -7), S(-74, -24), S(-2, -26), S(-17, -8), S(0, -4), S(1, -2), S(9, -13), S(0, -19), S(-40, -36)};

S bishop_pst[64] = {S(-21, 7), S(-53, 15), S(-44, 10), S(-87, 22), S(-66, 15), S(-51, 4), S(-24, 0), S(-46, 4), S(-16, -4), S(-3, -3), S(-9, -2), S(-26, 0), S(2, -10), S(-2, -10), S(-3, 0), S(-3, -6), S(-6, 18), S(11, 0), S(6, 0), S(25, -12), S(11, -6), S(50, -4), S(30, -1), S(29, 10), S(-9, 11), S(-5, 8), S(7, -1), S(18, 9), S(14, 2), S(8, 3), S(-1, 4), S(-7, 11), S(-7, 5), S(-12, 7), S(-13, 7), S(9, 3), S(5, 3), S(-9, 1), S(-14, 5), S(5, -4), S(1, 7), S(-1, 5), S(-3, 3), S(-8, 2), S(-2, 5), S(-2, 2), S(3, -3), S(15, -1), S(11, 8), S(6, -3), S(5, -12), S(-11, 3), S(-4, 1), S(10, -7), S(24, 2), S(12, -7), S(3, 0), S(15, 7), S(4, 1), S(-9, 5), S(0, 4), S(-2, 11), S(18, -8), S(14, -10)};

S rook_pst[64] =  {S(23, 16), S(3, 26), S(3, 35), S(3, 30), S(22, 22), S(42, 15), S(41, 13), S(63, 8), S(1, 19), S(-4, 33), S(14, 36), S(34, 25), S(21, 26), S(48, 13), S(44, 8), S(78, -6), S(-18, 20), S(3, 22), S(-2, 24), S(2, 20), S(31, 7), S(37, 1), S(84, -7), S(62, -12), S(-25, 22), S(-17, 19), S(-18, 27), S(-14, 23), S(-7, 8), S(0, 3), S(12, 0), S(16, -3), S(-39, 14), S(-41, 17), S(-33, 18), S(-25, 17), S(-22, 12), S(-29, 9), S(-8, 0), S(-16, -3), S(-41, 10), S(-40, 9), S(-32, 7), S(-29, 10), S(-20, 4), S(-19, -4), S(9, -21), S(-8, -18), S(-40, 4), S(-35, 7), S(-21, 7), S(-21, 8), S(-15, 0), S(-9, -6), S(4, -14), S(-21, -7), S(-22, 4), S(-21, 7), S(-12, 12), S(-4, 6), S(0, 0), S(-6, 2), S(3, -6), S(-17, -7)};

S queen_pst[64] = {S(-41, 37), S(-43, 59), S(-18, 82), S(17, 67), S(16, 65), S(20, 58), S(47, 6), S(-5, 37), S(-11, 6), S(-31, 51), S(-25, 88), S(-35, 109), S(-29, 126), S(7, 84), S(-8, 64), S(36, 39), S(-6, 15), S(-10, 37), S(-11, 81), S(2, 86), S(9, 101), S(51, 77), S(57, 35), S(54, 21), S(-23, 27), S(-17, 49), S(-14, 68), S(-14, 93), S(-12, 106), S(0, 91), S(5, 71), S(7, 52), S(-18, 18), S(-22, 56), S(-19, 64), S(-12, 86), S(-11, 82), S(-10, 71), S(-4, 55), S(0, 37), S(-22, 12), S(-13, 26), S(-13, 50), S(-13, 48), S(-8, 51), S(-4, 45), S(4, 24), S(-1, 7), S(-18, 2), S(-13, 8), S(-4, 6), S(0, 14), S(-3, 19), S(8, -9), S(12, -41), S(24, -74), S(-24, 2), S(-22, 1), S(-12, 7), S(-3, 16), S(-6, 2), S(-24, 0), S(0, -32), S(-15, -28)};

S king_pst[64] = {S(58, -106), S(33, -51), S(73, -42), S(-81, 10), S(-21, -9), S(32, -8), S(82, -17), S(127, -119), S(-67, -7), S(-23, 23), S(-67, 36), S(48, 16), S(-10, 39), S(-3, 51), S(31, 40), S(12, 7), S(-88, 9), S(24, 28), S(-49, 49), S(-67, 60), S(-26, 60), S(52, 52), S(30, 49), S(-10, 18), S(-54, -1), S(-67, 34), S(-83, 54), S(-127, 67), S(-117, 66), S(-78, 60), S(-78, 51), S(-104, 24), S(-51, -14), S(-58, 18), S(-90, 44), S(-121, 59), S(-121, 59), S(-79, 44), S(-85, 32), S(-111, 15), S(-6, -24), S(9, 0), S(-48, 22), S(-63, 35), S(-56, 34), S(-53, 25), S(-6, 4), S(-24, -7), S(84, -47), S(41, -18), S(26, -4), S(-8, 5), S(-10, 9), S(10, 0), S(57, -20), S(66, -39), S(73, -83), S(106, -64), S(82, -43), S(-14, -25), S(47, -45), S(10, -27), S(86, -56), S(82, -86)};



int8_t Engine::pawnPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;

  // const int8_t fileBonus[] = { -45,  -13,  -14,   -2,    7,    9,   36,  -14};
  // const int8_t rankBonus[] = {   0,   -15,  -1,  25,    30,   65,  127,    0};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_pawn_table[64] = {
  // int8_t mg_pawn_table[64] = {
  //     0,   0,   0,   0,   0,   0,  0,   0,
  //    98, 127,  61,  95,  68, 126, 34, -11,
  //    -6,   7,  26,  31,  65,  56, 25, -20,
  //   -14,  13,   6,  21,  23,  12, 17, -23,
  //   -27,  -2,  -5,  12,  17,   6, 10, -25,
  //   -26,  -4,  -4, -10,   3,   3, 33, -12,
  //   -35,  -1, -20, -23, -15,  24, 38, -22,
  //     0,   0,   0,   0,   0,   0,  0,   0,
  // };
  return pawn_pst[square_index].mg;
}

int8_t Engine::egPawnPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = {  24,   14,    4,   -2,   -8,   -5,   -2,    1};
  // const int8_t rankBonus[] = {   0,   -7,  -14,  -17,    0,   65,  127,    0};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_pawn_table[64] = {
  //     0,   0,   0,   0,   0,   0,   0,   0,
  //   127, 127, 100, 96, 105, 110, 127, 127,
  //    94, 100,  85,  67,  56,  53,  82,  84,
  //    32,  24,  13,   5,  -2,   4,  17,  17,
  //    13,   9,  -3,  -7,  -7,  -8,   3,  -1,
  //     4,   7,  -6,   1,   0,  -5,  -1,  -8,
  //    13,   8,   8,  10,  13,   0,   2,  -7,
  //     0,   0,   0,   0,   0,   0,   0,   0,
  // };
  return pawn_pst[square_index].eg;
}

int8_t Engine::knightPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -31,   -7,    7,   10,    7,   11,   -3,  -21};
  // const int8_t rankBonus[] = { -22,   -9,    2,    5,   15,   45,   22, -127};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_knight_table[64] = {
  //   -127, -89, -34, -49,  61, -97, -15, -107,
  //    -73, -41,  72,  36,  23,  62,   7,  -17,
  //    -47,  60,  37,  65,  84, 127,  73,   44,
  //     -9,  17,  19,  53,  37,  69,  18,   22,
  //    -13,   4,  16,  13,  28,  19,  21,   -8,
  //    -23,  -9,  12,  10,  19,  17,  25,  -16,
  //    -29, -53, -12,  -3,  -1,  18, -14,  -19,
  //   -105, -21, -58, -33, -17, -28, -19,  -23,
  // };
  return knight_pst[square_index].mg;
}

int8_t Engine::egKnightPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -31,  -13,   -5,    6,    4,   -5,  -16,  -33};
  // const int8_t rankBonus[] = { -32,  -15,   -2,   10,   13,   -9,  -27,  -22};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_knight_table[64] = {
  //   -58, -38, -13, -28, -31, -27, -63, -99,
  //   -25,  -8, -25,  -2,  -9, -25, -24, -52,
  //   -24, -20,  10,   9,  -1,  -9, -19, -41,
  //   -17,   3,  22,  22,  22,  11,   8, -18,
  //   -18,  -6,  16,  25,  16,  17,   4, -18,
  //   -23,  -3,  -1,  15,  10,  -3, -20, -22,
  //   -42, -20, -10,  -5,  -2, -20, -23, -44,
  //   -29, -51, -23, -15, -22, -18, -50, -64,
  // };
  return knight_pst[square_index].eg;
}

int8_t Engine::bishopPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -11,   11,   15,    7,    8,    5,   19,    0, };
  // const int8_t rankBonus[] = { -12,    8,   16,   13,    3,   36,   11,  -32, };
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_bishop_table[64] = {
  //   -29,   4, -82, -37, -25, -42,   7,  -8,
  //   -26,  16, -18, -13,  30,  59,  18, -47,
  //   -16,  37,  43,  40,  35,  50,  37,  -2,
  //    -4,   5,  19,  50,  37,  37,   7,  -2,
  //    -6,  13,  13,  26,  34,  12,  10,   4,
  //     0,  15,  15,  15,  14,  27,  18,  10,
  //     4,  15,  16,   0,   7,  21,  33,   1,
  //   -33,  -3, -14, -21, -13, -12, -39, -21,
  // };
  return bishop_pst[square_index].mg;

}

int8_t Engine::egBishopPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -20,  -14,  -13,   -4,   -2,   -7,  -19,  -28};
  // const int8_t rankBonus[] = { -29,  -12,   -9,   -6,    0,  -11,  -22,  -22};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_bishop_table[64] = {
  //   -14, -21, -11,  -8, -7,  -9, -17, -24,
  //    -8,  -4,   7, -12, -3, -13,  -4, -14,
  //     2,  -8,   0,  -1, -2,   6,   0,   4,
  //    -3,   9,  12,   9, 14,  10,   3,   2,
  //    -6,   3,  13,  19,  7,  10,  -3,  -9,
  //   -12,  -3,   8,  10, 13,   3,  -7, -15,
  //   -14, -18,  -7,  -1,  4,  -9, -15, -27,
  //   -23,  -9, -23,  -5, -9, -16,  -5, -17,
  // };
  return bishop_pst[square_index].eg;
}

int8_t Engine::rookPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -14,  -12,    5,   10,   14,   -1,  -14,   -4};
  // const int8_t rankBonus[] = {   1,  -19,   -9,  -12,   14,   33,   39,   77};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_rook_table[64] = {
  //    32,  42,  32,  51, 63,  9,  31,  43,
  //    27,  32,  58,  62, 80, 67,  26,  44,
  //    -5,  19,  26,  36, 17, 45,  61,  16,
  //   -24, -11,   7,  26, 24, 35,  -8, -20,
  //   -36, -26, -12,  -1,  9, -7,   6, -23,
  //   -45, -25, -16, -17,  3,  0,  -5, -33,
  //   -44, -16, -20,  -9, -1, 11,  -6, -71,
  //   -19, -13,   1,  17, 16,  7, -37, -26,
  // };
  return rook_pst[square_index].mg;

}

int8_t Engine::egRookPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = {  -1,    5,    3,    5,   -4,   -3,   -4,  -19};
  // const int8_t rankBonus[] = {  -8,   -6,  -12,   -4,   -5,   -6,   -1,  -10};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_rook_table[64] = {
  //   13, 10, 18, 15, 12,  12,   8,   5,
  //   11, 13, 13, 11, -3,   3,   8,   3,
  //    7,  7,  7,  5,  4,  -3,  -5,  -3,
  //    4,  3, 13,  1,  2,   1,  -1,   2,
  //    3,  5,  8,  4, -5,  -6,  -8, -11,
  //   -4,  0, -5, -1, -7, -12,  -8, -16,
  //   -6, -6,  0,  2, -9,  -9, -11,  -3,
  //   -9,  2,  3, -1, -5, -13,   4, -20,
  // };
  return rook_pst[square_index].eg;
}

int8_t Engine::queenPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -17,   -7,   -4,    2,   -7,    2,    3,   11};
  // const int8_t rankBonus[] = {  -1,    4,    0,   -8,  -11,   28,  -13,   -7};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_queen_table[64] = {
  //   -28,   0,  29,  12,  59,  44,  43,  45,
  //   -24, -39,  -5,   1, -16,  57,  28,  54,
  //   -13, -17,   7,   8,  29,  56,  47,  57,
  //   -27, -27, -16, -16,  -1,  17,  -2,   1,
  //    -9, -26,  -9, -10,  -2,  -4,   3,  -3,
  //   -14,   2, -11,  -2,  -5,   2,  14,   5,
  //   -35,  -8,  11,   2,   8,  15,  -3,   1,
  //    -1, -18,  -9,  10, -15, -25, -31, -50,
  // };
  return queen_pst[square_index].mg;
}

int8_t Engine::egQueenPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -27,  -22,   -4,   -5,   21,    8,   -7,  -29};
  // const int8_t rankBonus[] = { -59,  -29,  -16,    7,   20,   -6,   20,    8};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_queen_table[64] = {
  //    -9,  22,  22,  27,  27,  19,  10,  20,
  //   -17,  20,  32,  41,  58,  25,  30,   0,
  //   -20,   6,   9,  49,  47,  35,  19,   9,
  //     3,  22,  24,  45,  57,  40,  57,  36,
  //   -18,  28,  19,  47,  31,  34,  39,  23,
  //   -16, -27,  15,   6,   9,  17,  10,   5,
  //   -22, -23, -30, -16, -16, -23, -36, -32,
  //   -33, -28, -22, -43,  -5, -32, -20, -41,
  // };
  return queen_pst[square_index].eg;
}

int8_t Engine::kingPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = {  -8,   -4,  -27,  -83,  -31,  -57,    8,    0};
  // const int8_t rankBonus[] = {  26,   -1,  -29,  -22,   25,   85,   89,  118};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t mg_king_table[64] = {
  //   -65,  23,  16, -15, -56, -34,   2,  13,
  //    29,  -1, -20,  -7,  -8,  -4, -38, -29,
  //    -9,  24,   2, -16, -20,   6,  22, -22,
  //   -17, -20, -12, -27, -30, -25, -14, -36,
  //   -49,  -1, -27, -39, -46, -44, -33, -51,
  //   -14, -14, -22, -46, -44, -30, -15, -27,
  //     1,   7,  -8, -64, -43, -16,   9,   8,
  //   -15,  36,  12, -54,   8, -28,  24,  14,
  // };
  return king_pst[square_index].mg;
}

int8_t Engine::egKingPST(int loc) {
  const int square_index = this->board->color == WHITE ? loc : loc ^ 56;
  // const int8_t fileBonus[] = { -37,  -12,    2,   15,    6,   16,   -3,  -21};
  // const int8_t rankBonus[] = { -41,   -4,    5,    4,    0,   -5,  -13,  -42};
  // return fileBonus[square_index % 8] + rankBonus[(int)(square_index / 8 )];
  // int8_t eg_king_table[64] = {
  //   -74, -35, -18, -18, -11,  15,   4, -17,
  //   -12,  17,  14,  17,  17,  38,  23,  11,
  //    10,  17,  23,  15,  20,  45,  44,  13,
  //    -8,  22,  24,  27,  26,  33,  26,   3,
  //   -18,  -4,  21,  24,  27,  23,   9, -11,
  //   -19,  -3,  11,  21,  23,  16,   7,  -9,
  //   -27, -11,   4,  13,  14,   4,  -5, -17,
  //   -53, -34, -21, -11, -28, -14, -24, -43
  // };
  return king_pst[square_index].eg;
}